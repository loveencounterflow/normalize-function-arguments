{"mappings":"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","sources":["lib/helpers.js","src/helpers.coffee","lib/main.js","src/main.coffee"],"sourcesContent":["(function() {\n  'use strict';\n  var Template, bind_instance_methods, create_validator, debug, get_instance_methods, gnd, help, hide, nameit, new_pod, pod_prototypes, push_at, rpr, set_at, warn,\n    indexOf = [].indexOf;\n\n  //===========================================================================================================\n  // optional                  = Symbol 'optional'\n  pod_prototypes = Object.freeze([null, Object.getPrototypeOf({})]);\n\n  // new_pod                   = -> {}\n  new_pod = function() {\n    return Object.create(null);\n  };\n\n  // #===========================================================================================================\n  // @bind_proto = ( that, f ) -> that::[ f.name ] = f.bind that::\n\n    //===========================================================================================================\n  Template = class Template {\n    //---------------------------------------------------------------------------------------------------------\n    constructor(cfg = null) {\n      var descriptor, name, ref;\n      ref = Object.getOwnPropertyDescriptors(cfg != null ? cfg : {});\n      for (name in ref) {\n        descriptor = ref[name];\n        descriptor = (function() {\n          switch (true) {\n            //...................................................................................................\n            case gnd.function.isa(descriptor.value):\n              return ((descriptor) => {\n                var configurable, get;\n                ({\n                  configurable,\n                  value: get\n                } = descriptor);\n                return {\n                  enumerable: true,\n                  configurable,\n                  get\n                };\n              })(descriptor);\n            //...................................................................................................\n            case gnd.pod.isa(descriptor.value):\n              return ((descriptor) => {\n                var configurable, get, value;\n                ({configurable, value} = descriptor);\n                get = function() {\n                  return new Template(value);\n                };\n                return {\n                  enumerable: true,\n                  configurable,\n                  get\n                };\n              })(descriptor);\n            default:\n              //...................................................................................................\n              return descriptor;\n          }\n        }).call(this);\n        //.....................................................................................................\n        Object.defineProperty(this, name, descriptor);\n      }\n      return void 0;\n    }\n\n  };\n\n  //===========================================================================================================\n  create_validator = function(typename, isa) {\n    /* TAINT `gnd.nonempty_text.validate typename` */\n    /* TAINT `gnd.function.validate isa` */\n    /* TAINT silently accepts truthy, falsy values returned by `isa()`, not only booleans */\n    return function(x) {\n      if (isa(x)) {\n        return x;\n      }\n      throw new TypeError(`Ωnfa___1 validation error: expected a ${typename} got ${rpr(x)}`);\n    };\n  };\n\n  //===========================================================================================================\n  gnd = (function() {\n    var R, type, typename;\n    R = {\n      // boolean:        isa:  ( x ) -> ( x is true ) or ( x is false )\n      //.......................................................................................................\n      function: {\n        isa: function(x) {\n          return (Object.prototype.toString.call(x)) === '[object Function]';\n        }\n      },\n      //.......................................................................................................\n      template: {\n        isa: function(x) {\n          return x instanceof Template;\n        }\n      },\n      //.......................................................................................................\n      pod: {\n        isa: function(x) {\n          var ref;\n          return (x != null) && (ref = Object.getPrototypeOf(x), indexOf.call(pod_prototypes, ref) >= 0);\n        },\n        create: function(...Q) {\n          return Object.assign(new_pod(), ...Q);\n        }\n      },\n      //.......................................................................................................\n      nfa_cfg: {\n        isa: function(x) {\n          if (!gnd.pod.isa(x)) {\n            return false;\n          }\n          if (!gnd.template.isa_optional(x.template)) {\n            return false;\n          }\n          if (!gnd.function.isa_optional(x.isa)) {\n            return false;\n          }\n          if (!gnd.function.isa_optional(x.validate)) {\n            return false;\n          }\n          // return false unless gnd.function.isa_optional x.type\n          return true;\n        },\n        template: {\n          template: null,\n          isa: null,\n          validate: null,\n          type: null\n        }\n      }\n    };\n//.........................................................................................................\n    for (typename in R) {\n      type = R[typename];\n      type.name = typename;\n    }\n    // type.validate = ( x ) -> ...\n    //.........................................................................................................\n    return R;\n  })();\n\n  (() => {    /* TAINT this is more or less `ClearType.Type::create()` */\n    var results, type, typename;\n    results = [];\n    for (typename in gnd) {\n      type = gnd[typename];\n      results.push((function(typename, type) {\n        if (type.template != null) {\n          type.template = new Template(type.template);\n        }\n        if (type.isa != null) {\n          if (type.isa_optional == null) {\n            type.isa_optional = function(x) {\n              return (x == null) || (type.isa(x));\n            };\n          }\n          if (type.validate == null) {\n            type.validate = create_validator(type.name, function(x) {\n              return type.isa(x);\n            });\n          }\n        }\n        return null;\n      })(typename, type));\n    }\n    return results;\n  })();\n\n  //===========================================================================================================\n  hide = (object, name, value) => {\n    return Object.defineProperty(object, name, {\n      enumerable: false,\n      writable: true,\n      configurable: true,\n      value: value\n    });\n  };\n\n  //===========================================================================================================\n  nameit = function(name, f) {\n    Object.defineProperty(f, 'name', {\n      value: name\n    });\n    return f;\n  };\n\n  //===========================================================================================================\n  get_instance_methods = function(instance) {\n    var R, key, method, ref;\n    R = {};\n    ref = Object.getOwnPropertyDescriptors(instance);\n    for (key in ref) {\n      ({\n        value: method\n      } = ref[key]);\n      if (key === 'constructor') {\n        continue;\n      }\n      if (!gnd.function.isa(method)) {\n        continue;\n      }\n      R[key] = method;\n    }\n    return R;\n  };\n\n  //===========================================================================================================\n  bind_instance_methods = function(instance, keep_name = true) {\n    var key, method, ref;\n    ref = get_instance_methods(Object.getPrototypeOf(instance));\n    for (key in ref) {\n      method = ref[key];\n      if (keep_name) {\n        hide(instance, key, nameit(method.name, method.bind(instance)));\n      } else {\n        hide(instance, key, method.bind(instance));\n      }\n    }\n    return null;\n  };\n\n  //===========================================================================================================\n  push_at = function(list, idx, x) {\n    if (!(idx < 0)) {\n      throw new Error(`Ωnfa___7 expected negative number, got ${rpr(idx)}`);\n    }\n    list.splice(Math.max(list.length + idx, 0), 0, x);\n    return list;\n  };\n\n  // #-----------------------------------------------------------------------------------------------------------\n  // pop_at = ( list, idx, x ) ->\n  //   unless idx < 0\n  //     throw new Error \"Ωnfa___8 expected negative number, got #{rpr idx}\"\n  //   unless list.length >= Math.abs idx\n  //     throw new Error \"Ωnfa___9 list too short, got index #{idx} for length of #{list.length}\"\n  //   return ( list.splice idx, 1 )[ 0 ]\n\n  //-----------------------------------------------------------------------------------------------------------\n  set_at = function(list, idx, x) {\n    if (!(idx < 0)) {\n      throw new Error(`Ωnfa__10 expected negative number, got ${rpr(idx)}`);\n    }\n    list[list.length + idx] = x;\n    return x;\n  };\n\n  //===========================================================================================================\n  debug = console.debug;\n\n  help = console.help;\n\n  warn = console.warn;\n\n  rpr = function(x) {\n    return (require('loupe')).inspect(x);\n  };\n\n  //===========================================================================================================\n  // get_instance_methods\n  // pop_at\n  module.exports = {Template, gnd, create_validator, hide, nameit, bind_instance_methods, push_at, set_at, debug, help, warn, rpr};\n\n}).call(this);\n\n//# sourceMappingURL=data:application/json;base64,\n","\n'use strict'\n\n#===========================================================================================================\n# optional                  = Symbol 'optional'\npod_prototypes            = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\n# new_pod                   = -> {}\nnew_pod                   = -> Object.create null\n\n# #===========================================================================================================\n# @bind_proto = ( that, f ) -> that::[ f.name ] = f.bind that::\n\n#===========================================================================================================\nclass Template\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg = null ) ->\n    for name, descriptor of Object.getOwnPropertyDescriptors cfg ? {}\n      descriptor = switch true\n        #...................................................................................................\n        when gnd.function.isa descriptor.value    then do ( descriptor ) =>\n          { configurable, value: get, } = descriptor\n          return { enumerable: true, configurable, get, }\n        #...................................................................................................\n        when gnd.pod.isa      descriptor.value    then do ( descriptor ) =>\n          { configurable, value, } = descriptor\n          get = -> new Template value\n          return { enumerable: true, configurable, get, }\n        #...................................................................................................\n        else\n          descriptor\n      #.....................................................................................................\n      Object.defineProperty @, name, descriptor\n    return undefined\n\n\n#===========================================================================================================\ncreate_validator = ( typename, isa ) ->\n  ### TAINT `gnd.nonempty_text.validate typename` ###\n  ### TAINT `gnd.function.validate isa` ###\n  ### TAINT silently accepts truthy, falsy values returned by `isa()`, not only booleans ###\n  return ( x ) ->\n    return x if isa x\n    throw new TypeError \"Ωnfa___1 validation error: expected a #{typename} got #{rpr x}\"\n\n\n#===========================================================================================================\ngnd = do ->\n  R =\n    # boolean:        isa:  ( x ) -> ( x is true ) or ( x is false )\n    #.......................................................................................................\n    function:\n      isa:  ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    #.......................................................................................................\n    template:\n      isa:    ( x ) -> x instanceof Template\n    #.......................................................................................................\n    pod:\n      isa:    ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n      create: ( Q... ) -> Object.assign new_pod(), Q...\n    #.......................................................................................................\n    nfa_cfg:\n      isa: ( x ) ->\n        return false unless gnd.pod.isa x\n        return false unless gnd.template.isa_optional x.template\n        return false unless gnd.function.isa_optional x.isa\n        return false unless gnd.function.isa_optional x.validate\n        # return false unless gnd.function.isa_optional x.type\n        return true\n      template:\n        template: null\n        isa:      null\n        validate: null\n        type:     null\n  #.........................................................................................................\n  for typename, type of R\n    type.name     = typename\n    # type.validate = ( x ) -> ...\n  #.........................................................................................................\n  return R\n### TAINT this is more or less `ClearType.Type::create()` ###\ndo => for typename, type of gnd then do ( typename, type ) ->\n  if type.template? then type.template = ( new Template type.template )\n  if type.isa?\n    unless type.isa_optional? then type.isa_optional  = ( x ) -> ( not x? ) or ( type.isa x )\n    unless type.validate?     then type.validate      = create_validator type.name, ( x ) -> type.isa x\n  return null\n\n\n#===========================================================================================================\nhide = ( object, name, value ) => Object.defineProperty object, name,\n    enumerable:   false\n    writable:     true\n    configurable: true\n    value:        value\n\n#===========================================================================================================\nnameit = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }; f\n\n#===========================================================================================================\nget_instance_methods = ( instance ) ->\n  R             = {}\n  for key, { value: method, } of Object.getOwnPropertyDescriptors instance\n    continue if key is 'constructor'\n    continue unless gnd.function.isa method\n    R[ key ] = method\n  return R\n\n#===========================================================================================================\nbind_instance_methods = ( instance, keep_name = true ) ->\n  for key, method of get_instance_methods Object.getPrototypeOf instance\n    if keep_name\n      hide instance, key, nameit method.name, method.bind instance\n    else\n      hide instance, key, method.bind instance\n  return null\n\n\n#===========================================================================================================\npush_at = ( list, idx, x ) ->\n  unless idx < 0\n    throw new Error \"Ωnfa___7 expected negative number, got #{rpr idx}\"\n  list.splice ( Math.max list.length + idx, 0 ), 0, x\n  return list\n\n# #-----------------------------------------------------------------------------------------------------------\n# pop_at = ( list, idx, x ) ->\n#   unless idx < 0\n#     throw new Error \"Ωnfa___8 expected negative number, got #{rpr idx}\"\n#   unless list.length >= Math.abs idx\n#     throw new Error \"Ωnfa___9 list too short, got index #{idx} for length of #{list.length}\"\n#   return ( list.splice idx, 1 )[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\nset_at = ( list, idx, x ) ->\n  unless idx < 0\n    throw new Error \"Ωnfa__10 expected negative number, got #{rpr idx}\"\n  list[ list.length + idx ] = x\n  return x\n\n\n#===========================================================================================================\ndebug   = console.debug\nhelp    = console.help\nwarn    = console.warn\nrpr     = ( x ) -> ( require 'loupe' ).inspect x\n\n#===========================================================================================================\nmodule.exports = {\n  Template\n  gnd\n  create_validator\n  hide\n  nameit\n  # get_instance_methods\n  bind_instance_methods\n  push_at\n  # pop_at\n  set_at\n  debug\n  help\n  warn\n  rpr }\n","(function() {\n  'use strict';\n  var Argument_type_error, Arity_error, H, Internals, Named_arity_error, Nfa_error, Normalize_function_arguments, Not_implemented_error, Positional_arity_error, Runtime_arity_error, Signature_cfg_position_error, Signature_disposition_Error, Signature_error, Signature_missing_parameter_Error, Signature_naming_Error, Template, Type_error, Value_mismatch_error, bind_instance_methods, create_validator, debug, get_signature, gnd, help, hide, internals, nameit, nfa, normalizer, push_at, rpr, set_at, warn;\n\n  //===========================================================================================================\n  H = require('./helpers');\n\n  // get_instance_methods\n  // pop_at\n  ({Template, gnd, hide, create_validator, bind_instance_methods, nameit, push_at, set_at, debug, warn, help, rpr} = H);\n\n  // E                         = require './errors'\n  // optional                  = Symbol 'optional'\n\n    //=========================================================================================================\n  Nfa_error = class Nfa_error extends Error {};\n\n  Arity_error = class Arity_error extends Nfa_error {};\n\n  Named_arity_error = class Named_arity_error extends Arity_error {};\n\n  Runtime_arity_error = class Runtime_arity_error extends Arity_error {};\n\n  Positional_arity_error = class Positional_arity_error extends Arity_error {};\n\n  Not_implemented_error = class Not_implemented_error extends Nfa_error {};\n\n  Signature_error = class Signature_error extends Nfa_error {};\n\n  Signature_disposition_Error = class Signature_disposition_Error extends Signature_error {};\n\n  Signature_naming_Error = class Signature_naming_Error extends Signature_error {};\n\n  Signature_missing_parameter_Error = class Signature_missing_parameter_Error extends Signature_error {};\n\n  Signature_cfg_position_error = class Signature_cfg_position_error extends Signature_error {};\n\n  Value_mismatch_error = class Value_mismatch_error extends Nfa_error {};\n\n  Type_error = class Type_error extends Nfa_error {};\n\n  Argument_type_error = class Argument_type_error extends Type_error {};\n\n  //===========================================================================================================\n  internals = new (Internals = class Internals {\n    constructor() {\n      this.pod_prototypes = H.pod_prototypes;\n      this.gnd = gnd;\n      this.push_at = push_at;\n      // @pop_at         = pop_at\n      this.set_at = set_at;\n      this.nameit = nameit;\n      return void 0;\n    }\n\n  })();\n\n  //===========================================================================================================\n  Normalize_function_arguments = class Normalize_function_arguments {\n    //---------------------------------------------------------------------------------------------------------\n    constructor(cfg = null) {\n      if (cfg != null) {\n        throw new Not_implemented_error(\"Ωnfa___1 configuration not implemented\");\n      }\n      bind_instance_methods(this);\n      return void 0;\n    }\n\n    //---------------------------------------------------------------------------------------------------------\n    nfa(cfg, fn)/* Normalize Function Arguments */ {\n      var arity, fn_name, names, q_idx, q_ridx, validate;\n      switch (arity = arguments.length) {\n        case 1:\n          [cfg, fn] = [{}, cfg];\n          break;\n        case 2:\n          null;\n          break;\n        default:\n          throw new Runtime_arity_error(`Ωnfa___2 expected 1 or 2 arguments, got ${arity}`);\n      }\n      //.......................................................................................................\n      /* TAINT do this in `gnd` */\n      if (!gnd.pod.isa(cfg)) {\n        throw new Type_error(`Ωnfa___3 expected a POD, got ${rpr(cfg)}`);\n      }\n      if (!gnd.function.isa(fn)) {\n        throw new Type_error(`Ωnfa___4 expected a function, got ${rpr(cfg)}`);\n      }\n      //.......................................................................................................\n      cfg = {...gnd.nfa_cfg.template, ...cfg};\n      if (cfg.template != null) {\n        cfg.template = new Template(cfg.template);\n      }\n      gnd.nfa_cfg.validate(cfg);\n      //.......................................................................................................\n      ({names, q_idx, q_ridx} = this.get_signature(fn));\n      arity = names.length;\n      fn_name = fn.name;\n      //.......................................................................................................\n      validate = cfg.isa != null ? create_validator(`${fn_name}_cfg`, cfg.isa) : function(x) {\n        return x;\n      };\n      //.......................................................................................................\n      return nameit(fn_name, function(...P) {\n        /* ATP, `P` holds `arity` arguments and there *is* a POD in CFG position (which we assume to\n               represent CFG so we can make a copy, filling in template values): */\n        var Q, i, idx, len, name;\n        if (P.length > arity) {\n          throw new Positional_arity_error(`Ωnfa___5 expected up to ${arity} arguments, got ${P.length}`);\n        }\n        //.....................................................................................................\n        if (gnd.pod.isa(P.at(q_ridx))) {\n          while (P.length < arity) {\n            push_at(P, q_ridx, void 0);\n          }\n          Q = set_at(P, q_ridx, gnd.pod.create(cfg.template, P.at(q_ridx)));\n        } else {\n          while (P.length < arity) {\n            P.push(void 0);\n          }\n          /* ATP, `P` holds `arity` arguments and there *may be* an `undefined` in CFG position (which we\n                 assume is replaceable by a newly created CFG instance with template values): */\n          if ((P.at(q_ridx)) === void 0) {\n            Q = set_at(P, q_ridx, gnd.pod.create(cfg.template));\n          } else {\n            throw new Argument_type_error(`Ωnfa___6 expected an optional POD at position ${q_ridx}, got ${rpr(P.at(q_ridx))}`);\n          }\n        }\n//.....................................................................................................\n/* Harmonize values: */\n        for (idx = i = 0, len = names.length; i < len; idx = ++i) {\n          name = names[idx];\n          if (idx === q_idx/* skip over CFG object's (`Q`'s') position in P */) {\n            continue;\n          }\n          if (P[idx] === void 0) {\n            P[idx] = Q[name];\n          } else {\n            Q[name] = P[idx];\n          }\n          if (Q[name] === void 0) {\n            Q[name] = P[idx];\n          }\n        }\n        //.....................................................................................................\n        return validate(fn.call(this, ...P));\n      });\n    }\n\n    //---------------------------------------------------------------------------------------------------------\n    get_signature(fn) {\n      /* thx to https://github.com/sindresorhus/identifier-regex */\n      var i, idx, jsid_re, len, name, names, names_rpr, q_idx, q_ridx, signature, this_cfg_q_name;\n      this_cfg_q_name = 'cfg'/* TAINT pick from @cfg */\n      jsid_re = /^[$_\\p{ID_Start}][$_\\u200C\\u200D\\p{ID_Continue}]*$/sv;\n      //.......................................................................................................\n      signature = fn.toString();\n      signature = signature.replace(/\\s+/svg, '');\n      signature = signature.replace(/^[^\\(]*\\((?<parens>[^\\)]*)\\).*$/svg, '$<parens>');\n      names = signature.split(',');\n      //.......................................................................................................\n      q_idx = null;\n      for (idx = i = 0, len = names.length; i < len; idx = ++i) {\n        name = names[idx];\n        if (jsid_re.test(name)) {\n          if (name === this_cfg_q_name) {\n            q_idx = idx;\n          }\n        } else {\n          throw new Signature_disposition_Error(`Ωnfa___7 parameter disposition not compliant: ${rpr(name)} in ${rpr(signature)}`);\n        }\n      }\n      //.......................................................................................................\n      if (q_idx == null) {\n        names_rpr = names.join(', ');\n        throw new Signature_naming_Error(`Ωnfa___8 parameter naming not compliant: no parameter named ${rpr(this_cfg_q_name)}, got ${rpr(names_rpr)}`);\n      }\n      //.......................................................................................................\n      switch (q_idx) {\n        case names.length - 2:\n          q_ridx = -2;\n          break;\n        case names.length - 1:\n          q_ridx = -1;\n          break;\n        default:\n          throw new Signature_cfg_position_error(`Ωnfa___9 parameter ordering not compliant: expected ${rpr(this_cfg_q_name)} to come last or next-to-last, found it at index ${q_idx} of ${names.length} parameters`);\n      }\n      //.......................................................................................................\n      return {names, q_idx, q_ridx};\n    }\n\n  };\n\n  //===========================================================================================================\n  normalizer = new Normalize_function_arguments();\n\n  ({nfa, get_signature} = normalizer);\n\n  //===========================================================================================================\n  module.exports = {nfa, get_signature, Normalize_function_arguments, Template, internals};\n\n}).call(this);\n\n//# sourceMappingURL=data:application/json;base64,\n","\n'use strict'\n\n#===========================================================================================================\nH                         = require './helpers'\n{ Template\n  gnd\n  hide\n  create_validator\n  # get_instance_methods\n  bind_instance_methods\n  nameit\n  push_at\n  # pop_at\n  set_at\n  debug\n  warn\n  help\n  rpr                   } = H\n# E                         = require './errors'\n# optional                  = Symbol 'optional'\n\n\n#=========================================================================================================\nclass Nfa_error                           extends Error\nclass Arity_error                         extends Nfa_error\nclass Named_arity_error                   extends Arity_error\nclass Runtime_arity_error                 extends Arity_error\nclass Positional_arity_error              extends Arity_error\nclass Not_implemented_error               extends Nfa_error\nclass Signature_error                     extends Nfa_error\nclass Signature_disposition_Error         extends Signature_error\nclass Signature_naming_Error              extends Signature_error\nclass Signature_missing_parameter_Error   extends Signature_error\nclass Signature_cfg_position_error        extends Signature_error\nclass Value_mismatch_error                extends Nfa_error\nclass Type_error                          extends Nfa_error\nclass Argument_type_error                 extends Type_error\n\n\n#===========================================================================================================\ninternals = new class Internals then constructor: ->\n  @pod_prototypes = H.pod_prototypes\n  @gnd            = gnd\n  @push_at        = push_at\n  # @pop_at         = pop_at\n  @set_at         = set_at\n  @nameit         = nameit\n  return undefined\n\n\n#===========================================================================================================\nclass Normalize_function_arguments\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg = null ) ->\n    if cfg?\n      throw new Not_implemented_error \"Ωnfa___1 configuration not implemented\"\n    bind_instance_methods @\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  nfa: ( cfg, fn ) ->                                                   ### Normalize Function Arguments ###\n    switch arity = arguments.length\n      when 1 then [ cfg, fn, ] = [ {}, cfg, ]\n      when 2 then null\n      else throw new Runtime_arity_error \"Ωnfa___2 expected 1 or 2 arguments, got #{arity}\"\n    #.......................................................................................................\n    ### TAINT do this in `gnd` ###\n    unless gnd.pod.isa cfg      then throw new Type_error \"Ωnfa___3 expected a POD, got #{rpr cfg}\"\n    unless gnd.function.isa fn  then throw new Type_error \"Ωnfa___4 expected a function, got #{rpr cfg}\"\n    #.......................................................................................................\n    cfg               = { gnd.nfa_cfg.template..., cfg..., }\n    cfg.template      = ( new Template cfg.template ) if cfg.template?\n    gnd.nfa_cfg.validate cfg\n    #.......................................................................................................\n    { names\n      q_idx\n      q_ridx        } = @get_signature fn\n    arity             = names.length\n    fn_name           = fn.name\n    #.......................................................................................................\n    validate = if cfg.isa? then ( create_validator \"#{fn_name}_cfg\", cfg.isa ) else ( x ) -> x\n    #.......................................................................................................\n    return nameit fn_name, ( P... ) ->\n      if P.length > arity\n        throw new Positional_arity_error \"Ωnfa___5 expected up to #{arity} arguments, got #{P.length}\"\n      #.....................................................................................................\n      if gnd.pod.isa P.at q_ridx\n        push_at P, q_ridx, undefined while P.length < arity\n        ### ATP, `P` holds `arity` arguments and there *is* a POD in CFG position (which we assume to\n        represent CFG so we can make a copy, filling in template values): ###\n        Q = set_at P, q_ridx, gnd.pod.create cfg.template, P.at q_ridx\n      else\n        P.push undefined while P.length < arity\n        ### ATP, `P` holds `arity` arguments and there *may be* an `undefined` in CFG position (which we\n        assume is replaceable by a newly created CFG instance with template values): ###\n        if ( P.at q_ridx ) is undefined\n          Q = set_at P, q_ridx, gnd.pod.create cfg.template\n        else\n          throw new Argument_type_error \"Ωnfa___6 expected an optional POD at position #{q_ridx}, got #{rpr P.at q_ridx}\"\n      #.....................................................................................................\n      ### Harmonize values: ###\n      for name, idx in names\n        continue if idx is q_idx ### skip over CFG object's (`Q`'s') position in P ###\n        if ( P[ idx   ] is undefined )  then  P[ idx  ] = Q[ name ]\n        else                                  Q[ name ] = P[ idx  ] ### pos.arg:s other than undef. take precedence ###\n        if ( Q[ name  ] is undefined )  then  Q[ name ] = P[ idx  ] ### ensure all sign. names are set in CFG POD `Q` ###\n      #.....................................................................................................\n      return validate fn.call @, P...\n\n  #---------------------------------------------------------------------------------------------------------\n  get_signature: ( fn ) ->\n    this_cfg_q_name = 'cfg' ### TAINT pick from @cfg ###\n    ### thx to https://github.com/sindresorhus/identifier-regex ###\n    jsid_re   = /// ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ ///sv\n    #.......................................................................................................\n    signature = fn.toString()\n    signature = signature.replace /// \\s+ ///svg, ''\n    signature = signature.replace /// ^ [^ \\( ]* \\( (?<parens> [^ \\) ]* ) \\) .* $ ///svg, '$<parens>'\n    names     = signature.split ','\n    #.......................................................................................................\n    q_idx     = null\n    for name, idx in names\n      if jsid_re.test name\n        q_idx = idx if name is this_cfg_q_name\n      else\n        throw new Signature_disposition_Error \"Ωnfa___7 parameter disposition not compliant: #{rpr name} in #{rpr signature}\"\n    #.......................................................................................................\n    unless q_idx?\n      names_rpr = names.join ', '\n      throw new Signature_naming_Error \"Ωnfa___8 parameter naming not compliant: no parameter named #{rpr this_cfg_q_name}, got #{rpr names_rpr}\"\n    #.......................................................................................................\n    switch q_idx\n      when names.length - 2 then q_ridx = -2\n      when names.length - 1 then q_ridx = -1\n      else\n        throw new Signature_cfg_position_error \"Ωnfa___9 parameter ordering not compliant: expected #{rpr this_cfg_q_name} to come last or next-to-last, found it at index #{q_idx} of #{names.length} parameters\"\n    #.......................................................................................................\n    return { names, q_idx, q_ridx, }\n\n\n#===========================================================================================================\nnormalizer                = new Normalize_function_arguments()\n{ nfa\n  get_signature         } = normalizer\n\n#===========================================================================================================\nmodule.exports = { nfa, get_signature, Normalize_function_arguments, Template, internals, }\n\n"],"names":[],"version":3,"file":"main.js.map"}