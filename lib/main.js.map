{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n{ hide\n  # get_instance_methods\n  # bind_instance_methods\n  nameit\n  debug\n  warn\n  help\n  rpr                   } = require './helpers'\n# E                         = require './errors'\n#-----------------------------------------------------------------------------------------------------------\n# optional                  = Symbol 'optional'\npod_prototypes            = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\ngnd                       =\n  pod: isa: ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n\n\n#=========================================================================================================\nclass Arity_error extends Error\nclass Not_implemented_error extends Error\nclass Value_mismatch_error extends Error\n\n\n#===========================================================================================================\ninternals = new class Internals then constructor: ->\n  @pod_prototypes = pod_prototypes\n  @gnd            = gnd\n  return undefined\n\n\n#=========================================================================================================\nget_signature = ( f ) ->\n  ### thx to https://github.com/sindresorhus/identifier-regex ###\n  jsid_re              = /// ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ ///sv\n  debug()\n  body    = f.toString()\n  kernel  = body.replace /// ^ [^ \\( ]* \\( \\s* ( [^ \\) ]* ) \\s* \\) .* $ ///sv, '$1'\n  parts   = kernel.split /// , \\s* ///sv\n  # urge 'Ω__59', rpr body\n  # urge 'Ω__60', rpr kernel\n  # urge 'Ω__61', rpr parts\n  $names  = []\n  # R       = { $names, }\n  R       = {}\n  for part in parts\n    switch true\n      when ( match = part.match /// ^ [.]{3} \\s* (?<name> \\S+ ) \\s* $ ///sv )?\n        name          = match.groups.name\n        disposition   = 'soak'\n      when ( match = part.match /// ^ (?<name> \\S+ ) \\s* = \\s* optional $///sv )?\n        name          = match.groups.name\n        disposition   = 'optional'\n      else\n        unless ( part.match jsid_re )?\n          throw new Error \"Ω__62 not compliant: #{rpr part} in #{rpr kernel}\"\n        name          = part\n        disposition   = 'bare'\n    # info 'Ω__63', ( rpr part ), { name, disposition, }\n    R[ name ] = disposition\n    # R[ name ] = { name, disposition, }\n    $names.push name\n  return R\n\n#=========================================================================================================\nnfa = ( fn ) ->\n  ### Normalize Function Arguments ###\n  signature         = get_signature fn\n  names             = Object.keys signature\n  pos_names         = names[ .. names.length - 2 ]\n  arity             = names.length\n  dispositions      = ( signature[ name ] for name in names )\n  #.......................................................................................................\n  for disposition, idx in dispositions\n    continue if disposition is 'bare'\n    throw new Not_implemented_error \"Ω__65 encountered unimplemented disposition #{rpr disposition} for parameter #names[ idx ]\"\n  #.......................................................................................................\n  return ( P... ) ->\n    #.....................................................................................................\n    if P.length > arity\n      throw new Arity_error \"Ω__66 expected up to #{arity} arguments, got #{P.length}\"\n    #.....................................................................................................\n    unless gnd.pod.isa P.at -1\n      if P.length > arity - 1\n        throw new Arity_error \"Ω__67 expected up to #{arity - 1} positional arguments plus one POD, got #{P.length} positional arguments\"\n      P.push {} # Object.create null\n    else\n      ### NOTE copy object so we can modify it ###\n      # P[ P.length - 1 ] = Object.assign ( Object.create null ), P.at -1\n      P[ P.length - 1 ] = Object.assign {}, P.at -1\n    #.....................................................................................................\n    while P.length < arity\n      P.splice P.length - 1, 0, undefined\n    #.....................................................................................................\n    ### TAINT use Q = P.pop(), fn.call @, P..., Q ###\n    Q = P.at -1\n    for name, idx in pos_names\n      pos_value = P[ idx  ]\n      nme_value = Q[ name ]\n      switch true\n        when ( pos_value is   undefined ) and ( nme_value is   undefined ) then null\n        when ( pos_value is   undefined ) and ( nme_value isnt undefined ) then P[ idx  ] = nme_value\n        when ( pos_value isnt undefined ) and ( nme_value is   undefined ) then Q[ name ] = pos_value\n        else\n          ### TAINT treat acc to value mismatch resolution strategy ###\n          # unless pos_value is nme_value                                   # strategy: 'error'\n          #   throw new Value_mismatch_error \"Ω__68\"\n          # P[ idx  ] = nme_value                                           # strategy: 'named'\n          Q[ name ] = pos_value                                             # strategy: 'positional'\n    #.....................................................................................................\n    return fn.call @, P...\n\n\n#===========================================================================================================\nmodule.exports = { nfa, internals, }\n\n"
  ]
}