{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n# optional                  = Symbol 'optional'\npod_prototypes            = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\n# new_pod                   = -> {}\nnew_pod                   = -> Object.create null\n\n# #===========================================================================================================\n# @bind_proto = ( that, f ) -> that::[ f.name ] = f.bind that::\n\n#===========================================================================================================\ngnd = do ->\n  R =\n    # anything:       isa:  ( x ) -> true\n    # primitive:      isa:  ( x ) -> primitive_types.includes type_of x\n    # #.........................................................................................................\n    # ### NOTE types 'simple' and 'compound' more or less boil down to x being a POD, their explicit definition\n    # are for clarity and to allow for later modification ###\n    # simple:         isa:  ( x ) -> ( not x? ) or ( not gnd.compound.isa x )\n    # compound:       isa:  ( x ) -> gnd.pod.isa x\n    # #.........................................................................................................\n    # boolean:        isa:  ( x ) -> ( x is true ) or ( x is false )\n    function:       isa:  ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    pod:\n      isa:    ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n      create: ( Q = null ) -> Object.assign new_pod(), Q\n  type.name = typename for typename, type of R\n  return R\n\n\n\n#===========================================================================================================\nhide = ( object, name, value ) => Object.defineProperty object, name,\n    enumerable:   false\n    writable:     true\n    configurable: true\n    value:        value\n\n#===========================================================================================================\nnameit = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }; f\n\n#===========================================================================================================\nget_instance_methods = ( instance ) ->\n  R             = {}\n  for key, { value: method, } of Object.getOwnPropertyDescriptors instance\n    continue if key is 'constructor'\n    continue unless gnd.function.isa method\n    R[ key ] = method\n  return R\n\n#===========================================================================================================\nbind_instance_methods = ( instance, keep_name = true ) ->\n  for key, method of get_instance_methods Object.getPrototypeOf instance\n    if keep_name\n      hide instance, key, nameit method.name, method.bind instance\n    else\n      hide instance, key, method.bind instance\n  return null\n\n\n#===========================================================================================================\ndebug   = console.debug\nhelp    = console.help\nwarn    = console.warn\nrpr     = ( x ) -> ( require 'loupe' ).inspect x\n\n#===========================================================================================================\nmodule.exports = {\n  gnd\n  hide\n  nameit\n  # get_instance_methods\n  bind_instance_methods\n  debug\n  help\n  warn\n  rpr }\n"
  ]
}