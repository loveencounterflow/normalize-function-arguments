{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n# optional                  = Symbol 'optional'\npod_prototypes            = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\n# new_pod                   = -> {}\nnew_pod                   = -> Object.create null\n\n# #===========================================================================================================\n# @bind_proto = ( that, f ) -> that::[ f.name ] = f.bind that::\n\n#===========================================================================================================\nclass Template\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg = null ) ->\n    for name, descriptor of Object.getOwnPropertyDescriptors cfg ? {}\n      descriptor = switch true\n        #...................................................................................................\n        when gnd.function.isa descriptor.value    then do ( descriptor ) =>\n          { configurable, value: get, } = descriptor\n          return { enumerable: true, configurable, get, }\n        #...................................................................................................\n        when gnd.pod.isa      descriptor.value    then do ( descriptor ) =>\n          { configurable, value, } = descriptor\n          get = -> new Template value\n          return { enumerable: true, configurable, get, }\n        #...................................................................................................\n        else\n          descriptor\n      #.....................................................................................................\n      Object.defineProperty @, name, descriptor\n    return undefined\n\n\n#===========================================================================================================\ngnd = do ->\n  R =\n    # anything:       isa:  ( x ) -> true\n    # primitive:      isa:  ( x ) -> primitive_types.includes type_of x\n    # #.........................................................................................................\n    # ### NOTE types 'simple' and 'compound' more or less boil down to x being a POD, their explicit definition\n    # are for clarity and to allow for later modification ###\n    # simple:         isa:  ( x ) -> ( not x? ) or ( not gnd.compound.isa x )\n    # compound:       isa:  ( x ) -> gnd.pod.isa x\n    # boolean:        isa:  ( x ) -> ( x is true ) or ( x is false )\n    #.......................................................................................................\n    function:\n      isa:  ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    #.......................................................................................................\n    pod:\n      isa:    ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n      create: ( Q... ) -> Object.assign new_pod(), Q...\n    #.......................................................................................................\n    nfa_cfg:\n      template:\n        template: null\n  #.........................................................................................................\n  for typename, type of R\n    type.name     = typename\n    # type.validate = ( x ) -> ...\n  #.........................................................................................................\n  return R\ndo =>\n  for typename, type of gnd\n    type.template = ( new Template type.template ) if type.template?\n  return null\n\n#===========================================================================================================\nhide = ( object, name, value ) => Object.defineProperty object, name,\n    enumerable:   false\n    writable:     true\n    configurable: true\n    value:        value\n\n#===========================================================================================================\nnameit = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }; f\n\n#===========================================================================================================\nget_instance_methods = ( instance ) ->\n  R             = {}\n  for key, { value: method, } of Object.getOwnPropertyDescriptors instance\n    continue if key is 'constructor'\n    continue unless gnd.function.isa method\n    R[ key ] = method\n  return R\n\n#===========================================================================================================\nbind_instance_methods = ( instance, keep_name = true ) ->\n  for key, method of get_instance_methods Object.getPrototypeOf instance\n    if keep_name\n      hide instance, key, nameit method.name, method.bind instance\n    else\n      hide instance, key, method.bind instance\n  return null\n\n\n#===========================================================================================================\npush_at = ( list, idx, x ) ->\n  unless idx < 0\n    throw new Error \"Ωnfa___1 expected negative number, got #{rpr idx}\"\n  list.splice ( Math.max list.length + 1 + idx, 0 ), 0, x\n  return list\n\n#-----------------------------------------------------------------------------------------------------------\npop_at = ( list, idx, x ) ->\n  unless idx < 0\n    throw new Error \"Ωnfa___2 expected negative number, got #{rpr idx}\"\n  unless list.length >= Math.abs idx\n    throw new Error \"Ωnfa___3 list too short, got index #{idx} for length of #{list.length}\"\n  return ( list.splice idx, 1 )[ 0 ]\n\n\n#===========================================================================================================\ndebug   = console.debug\nhelp    = console.help\nwarn    = console.warn\nrpr     = ( x ) -> ( require 'loupe' ).inspect x\n\n#===========================================================================================================\nmodule.exports = {\n  Template\n  gnd\n  hide\n  nameit\n  # get_instance_methods\n  bind_instance_methods\n  push_at\n  pop_at\n  debug\n  help\n  warn\n  rpr }\n"
  ]
}